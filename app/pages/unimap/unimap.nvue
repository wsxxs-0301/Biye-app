<template>
	<view>
		<u-navbar title="地图" :border="true" :placeholder="true" @leftClick="goBack()" :autoBack="false"></u-navbar>
		<view class="mycontent">
			<map @tap="clickMap" @markertap="clickMarker" id="map" class="map" ref="map" :show-location="true"
				:latitude="latitude" :longitude="longitude"></map>
		</view>
	</view>
</template>

<script>
	import {
		listj,
		findj,
		fileUrl,
		savej
	} from '@/common/config/api.js'
	import {
		ideautil,
		yewuutil
	} from '@/common/commontools.js'
	export default {
		data() {
			return {
				latitude: 23.099994,
				longitude: 113.324520,
				fileUrl: fileUrl,
                pid:null,
                polyline:[{
                    points:[],
                    width:10,
                    color:"#0000ff",
                    dottedLine:false,
                    arrowLine:true
                }]
			}
		},
		onLoad(params) {
			this.pid = params.pid
		},
		onReady() {
			this._mapContext = uni.createMapContext("map", this);

			// 仅调用初始化，才会触发 on.("markerClusterCreate", (e) => {})
			this._mapContext.initMarkerCluster({
				enableDefaultStyle: false,
				zoomOnClick: true,
				gridSize: 60,
				complete(res) {
					console.log('initMarkerCluster', res)
				}
			});

			this._mapContext.on("markerClusterCreate", (e) => {
				console.log("markerClusterCreate", e);
			});

			this.addMarkers();

			uni.getLocation({
				success: (res) => {
					this.latitude = res.latitude
					this.longitude = res.longitude
				}
			});
			listj({params: {table: 'shop'}}).then(res => {
                this.addMarkersCus(res,false)
                let points = []
                for (let s of res) {
                    points.push({latitude:s.latitude, longitude: s.longitude})
                }
                this.polyline[0].points = points
			})

		},
		methods: {
			
			clickMarker(e) {
				let mid = e.markerId
				console.log(mid)
				uni.itool.nto({
					url:'/pages/shops/shopdetail?id='+mid
				})
			},
			clickMap(e) {
				console.log(e.detail.latitude)
			},
			goBack() {
				uni.navigateBack({
					delta: 1
				});
			},
			addMarker(latitude, longitude) {
				this._mapContext.addMarkers({
					markers: [{
						latitude: latitude,
						longitude: longitude
					}],
					clear: false,
					complete(res) {

					}
				})
			},
			async addMarkersCus(list,showLabel) {
				let markers = []
				for (let s of list) {
					let label = null
					if (showLabel) {
						label = {
							width: 50,
							height: 30,
							borderWidth: 1,
							borderRadius: 10,
							bgColor: '#ffffff',
							content:s.title
						}
					}
					let latitude = s.latitude
					let longitude = s.longitude
					if (!latitude || !longitude) {
						let lobj = await ideautil.getPointByAddress(s.address)
						console.log("getPointByAddress:"+JSON.stringify(lobj))
						latitude = lobj.latitude
						longitude = lobj.longitude
					}
					let marker = {
						id: s.id,
						latitude:latitude,
						longitude:longitude,
						iconPath: this.fileUrl + s.img,
						width: 50,
						height: 50,
						joinCluster: true, // 指定了该参数才会参与聚合
						label: label
					};
					markers.push(marker)
					
				}

				this._mapContext.addMarkers({
					markers,
					clear: true,
					complete(res) {
						console.log('addMarkers', res)
					}
				})

				/* this._mapContext.on('markerClusterClick', (res) => {
					console.log(res)
				}) */

			},
			addMarkers() {
				const img = this.fileUrl + '4476dd01-e609-4e89-ab36-ff88317f99a7.jpg';
				const marker = {
					id: 1,
					iconPath: img,
					width: 50,
					height: 50,
					joinCluster: true, // 指定了该参数才会参与聚合
					label: {
						width: 50,
						height: 30,
						borderWidth: 1,
						borderRadius: 10,
						bgColor: '#ffffff'
					}
				};

				const positions = [{
					latitude: 23.099994,
					longitude: 113.324520,
				}, {
					latitude: 23.099994,
					longitude: 113.322520,
				}, {
					latitude: 23.099994,
					longitude: 113.326520,
				}, {
					latitude: 23.096994,
					longitude: 113.329520,
				}]

				const markers = []

				positions.forEach((p, i) => {
					const newMarker = Object.assign({}, marker, p)
					newMarker.id = i + 1
					newMarker.label.content = `label ${i + 1}`
					markers.push(newMarker)
				})
				this._mapContext.addMarkers({
					markers,
					clear: false,
					complete(res) {
						console.log('addMarkers', res)
					}
				})

				/* this._mapContext.on('markerClusterClick', (res) => {
					console.log(res)
				}) */

			}
		}
	}
</script>

<style>
	.mycontent {
		width: 750upx;
		height: 1300upx;

	}

	.map {
		width: 750upx;
		height: 1300upx;

	}
</style>
